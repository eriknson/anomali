"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSavedMapsError = exports.getSavedMapsSuccess = exports.getSavedMaps = exports.loadCloudMapError = exports.loadCloudMapSuccess = exports.loadCloudMap = exports.setCloudProvider = exports.resetProviderStatus = exports.postSaveLoadSuccess = exports.exportFileError = exports.exportFileSuccess = exports.exportFileToCloud = exports.ActionTypes = void 0;

var _reduxActions = require("redux-actions");

var _keymirror = _interopRequireDefault(require("keymirror"));

var _actionTypes = require("../constants/action-types");

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var ActionTypes = (0, _actionTypes.addPrefix)((0, _keymirror["default"])({
  EXPORT_FILE_TO_CLOUD: null,
  EXPORT_FILE_SUCCESS: null,
  EXPORT_FILE_ERROR: null,
  RESET_PROVIDER_STATUS: null,
  SET_CLOUD_PROVIDER: null,
  POST_SAVE_LOAD_SUCCESS: null,
  LOAD_CLOUD_MAP: null,
  LOAD_CLOUD_MAP_SUCCESS: null,
  LOAD_CLOUD_MAP_ERROR: null,
  GET_SAVED_MAPS: null,
  GET_SAVED_MAPS_SUCCESS: null,
  GET_SAVED_MAPS_ERROR: null
}));
exports.ActionTypes = ActionTypes;
var exportFileToCloud = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_TO_CLOUD, function (payload) {
  return payload;
});
exports.exportFileToCloud = exportFileToCloud;
var exportFileSuccess = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_SUCCESS, function (payload) {
  return payload;
});
exports.exportFileSuccess = exportFileSuccess;
var exportFileError = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_ERROR, function (payload) {
  return payload;
});
exports.exportFileError = exportFileError;
var postSaveLoadSuccess = (0, _reduxActions.createAction)(ActionTypes.POST_SAVE_LOAD_SUCCESS, function (message) {
  return message;
});
exports.postSaveLoadSuccess = postSaveLoadSuccess;
var resetProviderStatus = (0, _reduxActions.createAction)(ActionTypes.RESET_PROVIDER_STATUS);
exports.resetProviderStatus = resetProviderStatus;
var setCloudProvider = (0, _reduxActions.createAction)(ActionTypes.SET_CLOUD_PROVIDER, function (provider) {
  return provider;
});
exports.setCloudProvider = setCloudProvider;
var loadCloudMap = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP, function (payload) {
  return payload;
});
exports.loadCloudMap = loadCloudMap;
var loadCloudMapSuccess = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP_SUCCESS, function (payload) {
  return payload;
});
exports.loadCloudMapSuccess = loadCloudMapSuccess;
var loadCloudMapError = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP_ERROR, function (payload) {
  return payload;
});
exports.loadCloudMapError = loadCloudMapError;
var getSavedMaps = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS, function (provider) {
  return provider;
});
exports.getSavedMaps = getSavedMaps;
var getSavedMapsSuccess = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS_SUCCESS, function (payload) {
  return payload;
});
exports.getSavedMapsSuccess = getSavedMapsSuccess;
var getSavedMapsError = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS_ERROR, function (payload) {
  return payload;
});
exports.getSavedMapsError = getSavedMapsError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb25zL3Byb3ZpZGVyLWFjdGlvbnMuanMiXSwibmFtZXMiOlsiQWN0aW9uVHlwZXMiLCJFWFBPUlRfRklMRV9UT19DTE9VRCIsIkVYUE9SVF9GSUxFX1NVQ0NFU1MiLCJFWFBPUlRfRklMRV9FUlJPUiIsIlJFU0VUX1BST1ZJREVSX1NUQVRVUyIsIlNFVF9DTE9VRF9QUk9WSURFUiIsIlBPU1RfU0FWRV9MT0FEX1NVQ0NFU1MiLCJMT0FEX0NMT1VEX01BUCIsIkxPQURfQ0xPVURfTUFQX1NVQ0NFU1MiLCJMT0FEX0NMT1VEX01BUF9FUlJPUiIsIkdFVF9TQVZFRF9NQVBTIiwiR0VUX1NBVkVEX01BUFNfU1VDQ0VTUyIsIkdFVF9TQVZFRF9NQVBTX0VSUk9SIiwiZXhwb3J0RmlsZVRvQ2xvdWQiLCJwYXlsb2FkIiwiZXhwb3J0RmlsZVN1Y2Nlc3MiLCJleHBvcnRGaWxlRXJyb3IiLCJwb3N0U2F2ZUxvYWRTdWNjZXNzIiwibWVzc2FnZSIsInJlc2V0UHJvdmlkZXJTdGF0dXMiLCJzZXRDbG91ZFByb3ZpZGVyIiwicHJvdmlkZXIiLCJsb2FkQ2xvdWRNYXAiLCJsb2FkQ2xvdWRNYXBTdWNjZXNzIiwibG9hZENsb3VkTWFwRXJyb3IiLCJnZXRTYXZlZE1hcHMiLCJnZXRTYXZlZE1hcHNTdWNjZXNzIiwiZ2V0U2F2ZWRNYXBzRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFDQTs7QUF0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNTyxJQUFNQSxXQUFXLEdBQUcsNEJBQ3pCLDJCQUFVO0FBQ1JDLEVBQUFBLG9CQUFvQixFQUFFLElBRGQ7QUFFUkMsRUFBQUEsbUJBQW1CLEVBQUUsSUFGYjtBQUdSQyxFQUFBQSxpQkFBaUIsRUFBRSxJQUhYO0FBSVJDLEVBQUFBLHFCQUFxQixFQUFFLElBSmY7QUFLUkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFMWjtBQU1SQyxFQUFBQSxzQkFBc0IsRUFBRSxJQU5oQjtBQU9SQyxFQUFBQSxjQUFjLEVBQUUsSUFQUjtBQVFSQyxFQUFBQSxzQkFBc0IsRUFBRSxJQVJoQjtBQVNSQyxFQUFBQSxvQkFBb0IsRUFBRSxJQVRkO0FBVVJDLEVBQUFBLGNBQWMsRUFBRSxJQVZSO0FBV1JDLEVBQUFBLHNCQUFzQixFQUFFLElBWGhCO0FBWVJDLEVBQUFBLG9CQUFvQixFQUFFO0FBWmQsQ0FBVixDQUR5QixDQUFwQjs7QUFpQkEsSUFBTUMsaUJBQWlCLEdBQUcsZ0NBQWFiLFdBQVcsQ0FBQ0Msb0JBQXpCLEVBQStDLFVBQUFhLE9BQU87QUFBQSxTQUFJQSxPQUFKO0FBQUEsQ0FBdEQsQ0FBMUI7O0FBRUEsSUFBTUMsaUJBQWlCLEdBQUcsZ0NBQWFmLFdBQVcsQ0FBQ0UsbUJBQXpCLEVBQThDLFVBQUFZLE9BQU87QUFBQSxTQUFJQSxPQUFKO0FBQUEsQ0FBckQsQ0FBMUI7O0FBRUEsSUFBTUUsZUFBZSxHQUFHLGdDQUFhaEIsV0FBVyxDQUFDRyxpQkFBekIsRUFBNEMsVUFBQVcsT0FBTztBQUFBLFNBQUlBLE9BQUo7QUFBQSxDQUFuRCxDQUF4Qjs7QUFFQSxJQUFNRyxtQkFBbUIsR0FBRyxnQ0FDakNqQixXQUFXLENBQUNNLHNCQURxQixFQUVqQyxVQUFBWSxPQUFPO0FBQUEsU0FBSUEsT0FBSjtBQUFBLENBRjBCLENBQTVCOztBQUtBLElBQU1DLG1CQUFtQixHQUFHLGdDQUFhbkIsV0FBVyxDQUFDSSxxQkFBekIsQ0FBNUI7O0FBRUEsSUFBTWdCLGdCQUFnQixHQUFHLGdDQUFhcEIsV0FBVyxDQUFDSyxrQkFBekIsRUFBNkMsVUFBQWdCLFFBQVE7QUFBQSxTQUFJQSxRQUFKO0FBQUEsQ0FBckQsQ0FBekI7O0FBRUEsSUFBTUMsWUFBWSxHQUFHLGdDQUFhdEIsV0FBVyxDQUFDTyxjQUF6QixFQUF5QyxVQUFBTyxPQUFPO0FBQUEsU0FBSUEsT0FBSjtBQUFBLENBQWhELENBQXJCOztBQUVBLElBQU1TLG1CQUFtQixHQUFHLGdDQUNqQ3ZCLFdBQVcsQ0FBQ1Esc0JBRHFCLEVBRWpDLFVBQUFNLE9BQU87QUFBQSxTQUFJQSxPQUFKO0FBQUEsQ0FGMEIsQ0FBNUI7O0FBS0EsSUFBTVUsaUJBQWlCLEdBQUcsZ0NBQWF4QixXQUFXLENBQUNTLG9CQUF6QixFQUErQyxVQUFBSyxPQUFPO0FBQUEsU0FBSUEsT0FBSjtBQUFBLENBQXRELENBQTFCOztBQUVBLElBQU1XLFlBQVksR0FBRyxnQ0FBYXpCLFdBQVcsQ0FBQ1UsY0FBekIsRUFBeUMsVUFBQVcsUUFBUTtBQUFBLFNBQUlBLFFBQUo7QUFBQSxDQUFqRCxDQUFyQjs7QUFFQSxJQUFNSyxtQkFBbUIsR0FBRyxnQ0FDakMxQixXQUFXLENBQUNXLHNCQURxQixFQUVqQyxVQUFBRyxPQUFPO0FBQUEsU0FBSUEsT0FBSjtBQUFBLENBRjBCLENBQTVCOztBQUtBLElBQU1hLGlCQUFpQixHQUFHLGdDQUFhM0IsV0FBVyxDQUFDWSxvQkFBekIsRUFBK0MsVUFBQUUsT0FBTztBQUFBLFNBQUlBLE9BQUo7QUFBQSxDQUF0RCxDQUExQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7Y3JlYXRlQWN0aW9ufSBmcm9tICdyZWR1eC1hY3Rpb25zJztcbmltcG9ydCBrZXlNaXJyb3IgZnJvbSAna2V5bWlycm9yJztcbmltcG9ydCB7YWRkUHJlZml4fSBmcm9tICdjb25zdGFudHMvYWN0aW9uLXR5cGVzJztcblxuZXhwb3J0IGNvbnN0IEFjdGlvblR5cGVzID0gYWRkUHJlZml4KFxuICBrZXlNaXJyb3Ioe1xuICAgIEVYUE9SVF9GSUxFX1RPX0NMT1VEOiBudWxsLFxuICAgIEVYUE9SVF9GSUxFX1NVQ0NFU1M6IG51bGwsXG4gICAgRVhQT1JUX0ZJTEVfRVJST1I6IG51bGwsXG4gICAgUkVTRVRfUFJPVklERVJfU1RBVFVTOiBudWxsLFxuICAgIFNFVF9DTE9VRF9QUk9WSURFUjogbnVsbCxcbiAgICBQT1NUX1NBVkVfTE9BRF9TVUNDRVNTOiBudWxsLFxuICAgIExPQURfQ0xPVURfTUFQOiBudWxsLFxuICAgIExPQURfQ0xPVURfTUFQX1NVQ0NFU1M6IG51bGwsXG4gICAgTE9BRF9DTE9VRF9NQVBfRVJST1I6IG51bGwsXG4gICAgR0VUX1NBVkVEX01BUFM6IG51bGwsXG4gICAgR0VUX1NBVkVEX01BUFNfU1VDQ0VTUzogbnVsbCxcbiAgICBHRVRfU0FWRURfTUFQU19FUlJPUjogbnVsbFxuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IGV4cG9ydEZpbGVUb0Nsb3VkID0gY3JlYXRlQWN0aW9uKEFjdGlvblR5cGVzLkVYUE9SVF9GSUxFX1RPX0NMT1VELCBwYXlsb2FkID0+IHBheWxvYWQpO1xuXG5leHBvcnQgY29uc3QgZXhwb3J0RmlsZVN1Y2Nlc3MgPSBjcmVhdGVBY3Rpb24oQWN0aW9uVHlwZXMuRVhQT1JUX0ZJTEVfU1VDQ0VTUywgcGF5bG9hZCA9PiBwYXlsb2FkKTtcblxuZXhwb3J0IGNvbnN0IGV4cG9ydEZpbGVFcnJvciA9IGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlcy5FWFBPUlRfRklMRV9FUlJPUiwgcGF5bG9hZCA9PiBwYXlsb2FkKTtcblxuZXhwb3J0IGNvbnN0IHBvc3RTYXZlTG9hZFN1Y2Nlc3MgPSBjcmVhdGVBY3Rpb24oXG4gIEFjdGlvblR5cGVzLlBPU1RfU0FWRV9MT0FEX1NVQ0NFU1MsXG4gIG1lc3NhZ2UgPT4gbWVzc2FnZVxuKTtcblxuZXhwb3J0IGNvbnN0IHJlc2V0UHJvdmlkZXJTdGF0dXMgPSBjcmVhdGVBY3Rpb24oQWN0aW9uVHlwZXMuUkVTRVRfUFJPVklERVJfU1RBVFVTKTtcblxuZXhwb3J0IGNvbnN0IHNldENsb3VkUHJvdmlkZXIgPSBjcmVhdGVBY3Rpb24oQWN0aW9uVHlwZXMuU0VUX0NMT1VEX1BST1ZJREVSLCBwcm92aWRlciA9PiBwcm92aWRlcik7XG5cbmV4cG9ydCBjb25zdCBsb2FkQ2xvdWRNYXAgPSBjcmVhdGVBY3Rpb24oQWN0aW9uVHlwZXMuTE9BRF9DTE9VRF9NQVAsIHBheWxvYWQgPT4gcGF5bG9hZCk7XG5cbmV4cG9ydCBjb25zdCBsb2FkQ2xvdWRNYXBTdWNjZXNzID0gY3JlYXRlQWN0aW9uKFxuICBBY3Rpb25UeXBlcy5MT0FEX0NMT1VEX01BUF9TVUNDRVNTLFxuICBwYXlsb2FkID0+IHBheWxvYWRcbik7XG5cbmV4cG9ydCBjb25zdCBsb2FkQ2xvdWRNYXBFcnJvciA9IGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlcy5MT0FEX0NMT1VEX01BUF9FUlJPUiwgcGF5bG9hZCA9PiBwYXlsb2FkKTtcblxuZXhwb3J0IGNvbnN0IGdldFNhdmVkTWFwcyA9IGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlcy5HRVRfU0FWRURfTUFQUywgcHJvdmlkZXIgPT4gcHJvdmlkZXIpO1xuXG5leHBvcnQgY29uc3QgZ2V0U2F2ZWRNYXBzU3VjY2VzcyA9IGNyZWF0ZUFjdGlvbihcbiAgQWN0aW9uVHlwZXMuR0VUX1NBVkVEX01BUFNfU1VDQ0VTUyxcbiAgcGF5bG9hZCA9PiBwYXlsb2FkXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0U2F2ZWRNYXBzRXJyb3IgPSBjcmVhdGVBY3Rpb24oQWN0aW9uVHlwZXMuR0VUX1NBVkVEX01BUFNfRVJST1IsIHBheWxvYWQgPT4gcGF5bG9hZCk7XG4iXX0=