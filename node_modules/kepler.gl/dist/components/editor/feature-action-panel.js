"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FeatureActionPanel = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _actionPanel = _interopRequireWildcard(require("../common/action-panel"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactOnclickoutside = _interopRequireDefault(require("react-onclickoutside"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icons = require("../common/icons");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var LAYOVER_OFFSET = 4;

var StyledActionsLayer = _styledComponents["default"].div(_templateObject());

var FeatureActionPanel =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(FeatureActionPanel, _PureComponent);

  function FeatureActionPanel() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, FeatureActionPanel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(FeatureActionPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleClickOutside", function (e) {
      e.preventDefault();
      e.stopPropagation();

      _this.props.onClose();
    });
    return _this;
  }

  (0, _createClass2["default"])(FeatureActionPanel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          datasets = _this$props.datasets,
          position = _this$props.position,
          layers = _this$props.layers,
          currentFilter = _this$props.currentFilter,
          onToggleLayer = _this$props.onToggleLayer,
          onDeleteFeature = _this$props.onDeleteFeature;

      var _ref = currentFilter || {},
          _ref$layerId = _ref.layerId,
          layerId = _ref$layerId === void 0 ? [] : _ref$layerId;

      return _react["default"].createElement(StyledActionsLayer, {
        className: (0, _classnames["default"])('feature-action-panel', className),
        style: {
          top: "".concat(position.y + LAYOVER_OFFSET, "px"),
          left: "".concat(position.x + LAYOVER_OFFSET, "px")
        }
      }, _react["default"].createElement(_actionPanel["default"], null, _react["default"].createElement(_actionPanel.ActionPanelItem, {
        className: "editor-layers-list",
        label: "layers",
        Icon: _icons.Layers
      }, layers.map(function (layer, index) {
        return _react["default"].createElement(_actionPanel.ActionPanelItem, {
          key: index,
          label: layer.config.label,
          color: datasets[layer.config.dataId].color,
          isSelection: true,
          isActive: layerId.includes(layer.id),
          onClick: function onClick() {
            return onToggleLayer(layer);
          },
          className: "layer-panel-item"
        });
      })), _react["default"].createElement(_actionPanel.ActionPanelItem, {
        label: "delete",
        className: "delete-panel-item",
        Icon: _icons.Trash,
        onClick: onDeleteFeature
      })));
    }
  }]);
  return FeatureActionPanel;
}(_react.PureComponent);

exports.FeatureActionPanel = FeatureActionPanel;
(0, _defineProperty2["default"])(FeatureActionPanel, "propTypes", {
  className: _propTypes["default"].string,
  datasets: _propTypes["default"].object.isRequired,
  position: _propTypes["default"].object.isRequired,
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,
  currentFilter: _propTypes["default"].object,
  onClose: _propTypes["default"].func.isRequired,
  onDeleteFeature: _propTypes["default"].func.isRequired
});
(0, _defineProperty2["default"])(FeatureActionPanel, "defaultProps", {
  position: {}
});

var _default = (0, _reactOnclickoutside["default"])(FeatureActionPanel);

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,