"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MapInfoPanel = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _cloudTile = _interopRequireDefault(require("./cloud-tile"));

var _imageModalContainer = _interopRequireDefault(require("./image-modal-container"));

var _providerModalContainer = _interopRequireDefault(require("./provider-modal-container"));

var _statusPanel = _interopRequireWildcard(require("./status-panel"));

var _defaultSettings = require("../../constants/default-settings");

var _styledComponents2 = require("../common/styled-components");

var _imagePreview = _interopRequireDefault(require("../common/image-preview"));

var _reactIntl = require("react-intl");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  .save-map-modal-content {\n    min-height: 400px;\n    flex-direction: column;\n  }\n\n  .description {\n    width: 300px;\n  }\n\n  .image-preview-panel {\n    width: 300px;\n\n    .image-preview {\n      padding: 0;\n    }\n  }\n\n  .map-info-panel {\n    flex-direction: column;\n  }\n\n  .save-map-modal-description {\n    .modal-section-subtitle {\n      margin-left: 6px;\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledSaveMapModal = _styledComponents["default"].div.attrs({
  className: 'save-map-modal'
})(_templateObject());

var nop = function nop() {};

var MapInfoPanel = function MapInfoPanel(_ref) {
  var _ref$mapInfo = _ref.mapInfo,
      mapInfo = _ref$mapInfo === void 0 ? {
    description: '',
    title: ''
  } : _ref$mapInfo,
      characterLimits = _ref.characterLimits,
      onChangeInput = _ref.onChangeInput;
  return _react["default"].createElement("div", {
    className: "selection map-info-panel"
  }, _react["default"].createElement(_styledComponents2.StyledModalSection, {
    className: "save-map-modal-name"
  }, _react["default"].createElement("div", {
    className: "modal-section-title"
  }, "Name*"), _react["default"].createElement("div", null, _react["default"].createElement(_styledComponents2.InputLight, {
    id: "map-title",
    type: "text",
    value: mapInfo.title,
    onChange: function onChange(e) {
      return onChangeInput('title', e);
    },
    placeholder: "Type map title"
  }))), _react["default"].createElement(_styledComponents2.StyledModalSection, null, _react["default"].createElement("div", {
    className: "save-map-modal-description",
    style: {
      display: 'flex'
    }
  }, _react["default"].createElement("div", {
    className: "modal-section-title"
  }, "Description"), _react["default"].createElement("div", {
    className: "modal-section-subtitle"
  }, "(optional)")), _react["default"].createElement("div", null, _react["default"].createElement(_styledComponents2.TextAreaLight, {
    rows: "3",
    id: "map-description",
    style: {
      resize: 'none'
    },
    value: mapInfo.description,
    onChange: function onChange(e) {
      return onChangeInput('description', e);
    },
    placeholder: "Type map description"
  })), _react["default"].createElement(_styledComponents2.StyledModalInputFootnote, {
    className: "save-map-modal-description__footnote",
    error: characterLimits.description && mapInfo.description.length > characterLimits.description
  }, mapInfo.description.length, "/", characterLimits.description || _defaultSettings.MAP_INFO_CHARACTER.description, ' ', "characters")));
};

exports.MapInfoPanel = MapInfoPanel;

function SaveMapModalFactory() {
  var SaveMapModal =
  /*#__PURE__*/
  function (_Component) {
    (0, _inherits2["default"])(SaveMapModal, _Component);

    function SaveMapModal() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2["default"])(this, SaveMapModal);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(SaveMapModal)).call.apply(_getPrototypeOf2, [this].concat(args)));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onChangeInput", function (key, e) {
        var value = e.target.value;

        _this.props.onSetMapInfo((0, _defineProperty2["default"])({}, key, value));
      });
      return _this;
    }

    (0, _createClass2["default"])(SaveMapModal, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            mapInfo = _this$props.mapInfo,
            exportImage = _this$props.exportImage,
            _this$props$character = _this$props.characterLimits,
            characterLimits = _this$props$character === void 0 ? {} : _this$props$character,
            cloudProviders = _this$props.cloudProviders,
            isProviderLoading = _this$props.isProviderLoading,
            currentProvider = _this$props.currentProvider,
            providerError = _this$props.providerError,
            onSetCloudProvider = _this$props.onSetCloudProvider,
            onUpdateImageSetting = _this$props.onUpdateImageSetting;
        var provider = currentProvider ? cloudProviders.find(function (p) {
          return p.name === currentProvider;
        }) : null;
        return _react["default"].createElement(_providerModalContainer["default"], {
          onSetCloudProvider: onSetCloudProvider,
          cloudProviders: cloudProviders,
          currentProvider: currentProvider
        }, _react["default"].createElement(_imageModalContainer["default"], {
          currentProvider: currentProvider,
          cloudProviders: cloudProviders,
          onUpdateImageSetting: onUpdateImageSetting
        }, _react["default"].createElement(StyledSaveMapModal, null, _react["default"].createElement(_styledComponents2.StyledModalContent, {
          className: "save-map-modal-content"
        }, _react["default"].createElement(_styledComponents2.StyledExportSection, {
          disabled: isProviderLoading
        }, _react["default"].createElement("div", {
          className: "description"
        }, _react["default"].createElement("div", {
          className: "title"
        }, _react["default"].createElement(_reactIntl.FormattedMessage, {
          id: 'modal.saveMap.title'
        })), _react["default"].createElement("div", {
          className: "subtitle"
        }, _react["default"].createElement(_reactIntl.FormattedMessage, {
          id: 'modal.saveMap.subtitle'
        }))), _react["default"].createElement("div", {
          className: "selection"
        }, cloudProviders.map(function (cloudProvider) {
          return _react["default"].createElement(_cloudTile["default"], {
            key: cloudProvider.name,
            onSelect: function onSelect() {
              return onSetCloudProvider(cloudProvider.name);
            },
            onSetCloudProvider: onSetCloudProvider,
            cloudProvider: cloudProvider,
            isSelected: cloudProvider.name === currentProvider,
            isConnected: Boolean(cloudProvider.getAccessToken && cloudProvider.getAccessToken())
          });
        }))), provider && provider.getManagementUrl && _react["default"].createElement(_styledComponents2.StyledExportSection, {
          style: {
            margin: '2px 0'
          }
        }, _react["default"].createElement("div", {
          className: "description"
        }), _react["default"].createElement("div", {
          className: "selection"
        }, _react["default"].createElement("a", {
          key: 1,
          href: provider.getManagementUrl(),
          target: "_blank",
          rel: "noopener noreferrer",
          style: {
            textDecoration: 'underline'
          }
        }, "Go to your Kepler.gl ", provider.displayName, " page"))), _react["default"].createElement(_styledComponents2.StyledExportSection, null, _react["default"].createElement("div", {
          className: "description image-preview-panel"
        }, _react["default"].createElement(_imagePreview["default"], {
          exportImage: exportImage,
          width: _defaultSettings.MAP_THUMBNAIL_DIMENSION.width,
          showDimension: false
        })), isProviderLoading ? _react["default"].createElement("div", {
          className: "selection map-saving-animation"
        }, _react["default"].createElement(_statusPanel.UploadAnimation, {
          icon: provider && provider.icon
        })) : _react["default"].createElement(MapInfoPanel, {
          mapInfo: mapInfo,
          characterLimits: characterLimits,
          onChangeInput: this._onChangeInput
        })), providerError ? _react["default"].createElement(_statusPanel["default"], {
          isLoading: false,
          error: providerError,
          providerIcon: provider && provider.icon
        }) : null))));
      }
    }]);
    return SaveMapModal;
  }(_react.Component);

  (0, _defineProperty2["default"])(SaveMapModal, "propTypes", {
    exportImage: _propTypes["default"].object.isRequired,
    mapInfo: _propTypes["default"].object.isRequired,
    isProviderLoading: _propTypes["default"].bool.isRequired,
    thumbWidth: _propTypes["default"].number,
    thumbHeight: _propTypes["default"].number,
    characterLimits: _propTypes["default"].object,
    cloudProviders: _propTypes["default"].arrayOf(_propTypes["default"].object),
    currentProvider: _propTypes["default"].string,
    onSetMapInfo: _propTypes["default"].func.isRequired,
    onSetCloudProvider: _propTypes["default"].func.isRequired,
    onUpdateImageSetting: _propTypes["default"].func.isRequired
  });
  (0, _defineProperty2["default"])(SaveMapModal, "defaultProps", {
    characterLimits: _defaultSettings.MAP_INFO_CHARACTER,
    cloudProviders: [],
    currentProvider: null,
    providerError: null,
    isProviderLoading: false,
    onSetCloudProvider: nop,
    onUpdateImageSetting: nop
  });
  return SaveMapModal;
}

var _default = SaveMapModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,