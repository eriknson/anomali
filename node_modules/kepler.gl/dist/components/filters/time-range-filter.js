"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _timeRangeSlider = _interopRequireDefault(require("../common/time-range-slider"));

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * TimeRangeFilter -> TimeRangeSlider -> RangeSlider
 */
TimeRangeFilterFactory.deps = [_timeRangeSlider["default"]];

function TimeRangeFilterFactory(TimeRangeSlider) {
  var TimeRangeFilter = function TimeRangeFilter(_ref) {
    var filter = _ref.filter,
        setFilter = _ref.setFilter,
        isAnimatable = _ref.isAnimatable,
        toggleAnimation = _ref.toggleAnimation,
        hideTimeTitle = _ref.hideTimeTitle;
    return _react["default"].createElement(TimeRangeSlider, {
      domain: filter.domain,
      value: filter.value,
      plotType: filter.plotType,
      lineChart: filter.lineChart,
      step: filter.step,
      speed: filter.speed,
      histogram: filter.enlarged ? filter.enlargedHistogram : filter.histogram,
      onChange: setFilter,
      toggleAnimation: toggleAnimation,
      isAnimatable: isAnimatable,
      isEnlarged: filter.enlarged,
      hideTimeTitle: hideTimeTitle
    });
  };

  return TimeRangeFilter;
}

var _default = TimeRangeFilterFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvdGltZS1yYW5nZS1maWx0ZXIuanMiXSwibmFtZXMiOlsiVGltZVJhbmdlRmlsdGVyRmFjdG9yeSIsImRlcHMiLCJUaW1lUmFuZ2VTbGlkZXJGYWN0b3J5IiwiVGltZVJhbmdlU2xpZGVyIiwiVGltZVJhbmdlRmlsdGVyIiwiZmlsdGVyIiwic2V0RmlsdGVyIiwiaXNBbmltYXRhYmxlIiwidG9nZ2xlQW5pbWF0aW9uIiwiaGlkZVRpbWVUaXRsZSIsImRvbWFpbiIsInZhbHVlIiwicGxvdFR5cGUiLCJsaW5lQ2hhcnQiLCJzdGVwIiwic3BlZWQiLCJlbmxhcmdlZCIsImVubGFyZ2VkSGlzdG9ncmFtIiwiaGlzdG9ncmFtIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUtBOzs7QUFJQUEsc0JBQXNCLENBQUNDLElBQXZCLEdBQThCLENBQUNDLDJCQUFELENBQTlCOztBQUVBLFNBQVNGLHNCQUFULENBQWdDRyxlQUFoQyxFQUFpRDtBQUMvQyxNQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCO0FBQUEsUUFBRUMsTUFBRixRQUFFQSxNQUFGO0FBQUEsUUFBVUMsU0FBVixRQUFVQSxTQUFWO0FBQUEsUUFBcUJDLFlBQXJCLFFBQXFCQSxZQUFyQjtBQUFBLFFBQW1DQyxlQUFuQyxRQUFtQ0EsZUFBbkM7QUFBQSxRQUFvREMsYUFBcEQsUUFBb0RBLGFBQXBEO0FBQUEsV0FDdEIsZ0NBQUMsZUFBRDtBQUNFLE1BQUEsTUFBTSxFQUFFSixNQUFNLENBQUNLLE1BRGpCO0FBRUUsTUFBQSxLQUFLLEVBQUVMLE1BQU0sQ0FBQ00sS0FGaEI7QUFHRSxNQUFBLFFBQVEsRUFBRU4sTUFBTSxDQUFDTyxRQUhuQjtBQUlFLE1BQUEsU0FBUyxFQUFFUCxNQUFNLENBQUNRLFNBSnBCO0FBS0UsTUFBQSxJQUFJLEVBQUVSLE1BQU0sQ0FBQ1MsSUFMZjtBQU1FLE1BQUEsS0FBSyxFQUFFVCxNQUFNLENBQUNVLEtBTmhCO0FBT0UsTUFBQSxTQUFTLEVBQUVWLE1BQU0sQ0FBQ1csUUFBUCxHQUFrQlgsTUFBTSxDQUFDWSxpQkFBekIsR0FBNkNaLE1BQU0sQ0FBQ2EsU0FQakU7QUFRRSxNQUFBLFFBQVEsRUFBRVosU0FSWjtBQVNFLE1BQUEsZUFBZSxFQUFFRSxlQVRuQjtBQVVFLE1BQUEsWUFBWSxFQUFFRCxZQVZoQjtBQVdFLE1BQUEsVUFBVSxFQUFFRixNQUFNLENBQUNXLFFBWHJCO0FBWUUsTUFBQSxhQUFhLEVBQUVQO0FBWmpCLE1BRHNCO0FBQUEsR0FBeEI7O0FBaUJBLFNBQU9MLGVBQVA7QUFDRDs7ZUFFY0osc0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjAgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRpbWVSYW5nZVNsaWRlckZhY3RvcnkgZnJvbSAnY29tcG9uZW50cy9jb21tb24vdGltZS1yYW5nZS1zbGlkZXInO1xuXG4vKlxuICogVGltZVJhbmdlRmlsdGVyIC0+IFRpbWVSYW5nZVNsaWRlciAtPiBSYW5nZVNsaWRlclxuICovXG5cblRpbWVSYW5nZUZpbHRlckZhY3RvcnkuZGVwcyA9IFtUaW1lUmFuZ2VTbGlkZXJGYWN0b3J5XTtcblxuZnVuY3Rpb24gVGltZVJhbmdlRmlsdGVyRmFjdG9yeShUaW1lUmFuZ2VTbGlkZXIpIHtcbiAgY29uc3QgVGltZVJhbmdlRmlsdGVyID0gKHtmaWx0ZXIsIHNldEZpbHRlciwgaXNBbmltYXRhYmxlLCB0b2dnbGVBbmltYXRpb24sIGhpZGVUaW1lVGl0bGV9KSA9PiAoXG4gICAgPFRpbWVSYW5nZVNsaWRlclxuICAgICAgZG9tYWluPXtmaWx0ZXIuZG9tYWlufVxuICAgICAgdmFsdWU9e2ZpbHRlci52YWx1ZX1cbiAgICAgIHBsb3RUeXBlPXtmaWx0ZXIucGxvdFR5cGV9XG4gICAgICBsaW5lQ2hhcnQ9e2ZpbHRlci5saW5lQ2hhcnR9XG4gICAgICBzdGVwPXtmaWx0ZXIuc3RlcH1cbiAgICAgIHNwZWVkPXtmaWx0ZXIuc3BlZWR9XG4gICAgICBoaXN0b2dyYW09e2ZpbHRlci5lbmxhcmdlZCA/IGZpbHRlci5lbmxhcmdlZEhpc3RvZ3JhbSA6IGZpbHRlci5oaXN0b2dyYW19XG4gICAgICBvbkNoYW5nZT17c2V0RmlsdGVyfVxuICAgICAgdG9nZ2xlQW5pbWF0aW9uPXt0b2dnbGVBbmltYXRpb259XG4gICAgICBpc0FuaW1hdGFibGU9e2lzQW5pbWF0YWJsZX1cbiAgICAgIGlzRW5sYXJnZWQ9e2ZpbHRlci5lbmxhcmdlZH1cbiAgICAgIGhpZGVUaW1lVGl0bGU9e2hpZGVUaW1lVGl0bGV9XG4gICAgLz5cbiAgKTtcblxuICByZXR1cm4gVGltZVJhbmdlRmlsdGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaW1lUmFuZ2VGaWx0ZXJGYWN0b3J5O1xuIl19