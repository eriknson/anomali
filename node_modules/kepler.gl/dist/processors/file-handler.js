"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readFile = readFile;
exports.getFileHandler = getFileHandler;
exports.getFileType = getFileType;
exports.loadCsv = loadCsv;
exports.loadJSON = loadJSON;
exports.readJSONFile = readJSONFile;
exports.isGeoJson = isGeoJson;
exports.isFeature = isFeature;
exports.isFeatureCollection = isFeatureCollection;
exports.isRowObject = isRowObject;
exports.isKeplerGlMap = isKeplerGlMap;
exports.determineJsonProcess = determineJsonProcess;
exports.filesToDataPayload = filesToDataPayload;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _window = require("global/window");

var _console = _interopRequireDefault(require("global/console"));

var _dataProcessor = require("./data-processor");

var _utils = require("../utils/utils");

var _defaultSettings = require("../constants/default-settings");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var FILE_HANDLERS = {
  csv: loadCsv,
  json: loadJSON
};

function readFile(_ref) {
  var file = _ref.file,
      _ref$fileCache = _ref.fileCache,
      fileCache = _ref$fileCache === void 0 ? [] : _ref$fileCache;
  return new Promise(function (resolve, reject) {
    var _getFileHandler = getFileHandler(file),
        handler = _getFileHandler.handler,
        format = _getFileHandler.format;

    if (!handler) {
      _console["default"].warn("Canont determine file handler for file ".concat(file.name, ". It must have a valid file extension"));

      resolve(fileCache);
    }

    handler({
      file: file,
      format: format
    }).then(function (result) {
      if (!result || !result.data) {
        // return fileCache, to keep process other files
        resolve(fileCache);
      }

      resolve([].concat((0, _toConsumableArray2["default"])(fileCache), [{
        data: result.data,
        info: {
          label: file.name,
          format: result.format
        }
      }]));
    });
  });
}

function getFileHandler(fileBlob) {
  var type = getFileType(fileBlob.name);
  return {
    handler: FILE_HANDLERS[type],
    format: type
  };
}

function getFileType(filename) {
  if (filename.endsWith('csv')) {
    return 'csv';
  } else if (filename.endsWith('json') || filename.endsWith('geojson')) {
    // Read GeoJson from browser
    return 'json';
  } // Wait to add other file type handler


  return 'other';
}

function readCSVFile(fileBlob) {
  return new Promise(function (resolve, reject) {
    var fileReader = new _window.FileReader();

    fileReader.onload = function (_ref2) {
      var result = _ref2.target.result;
      resolve(result);
    };

    fileReader.readAsText(fileBlob);
  });
}

function loadCsv(_ref3) {
  var file = _ref3.file,
      format = _ref3.format,
      _ref3$processor = _ref3.processor,
      processor = _ref3$processor === void 0 ? _dataProcessor.processCsvData : _ref3$processor;
  return readCSVFile(file).then(function (rawData) {
    return rawData ? {
      data: processor(rawData),
      format: format
    } : null;
  });
}

function loadJSON(_ref4) {
  var file = _ref4.file,
      _ref4$processor = _ref4.processor,
      processor = _ref4$processor === void 0 ? _dataProcessor.processGeojson : _ref4$processor;
  return readJSONFile(file).then(function (content) {
    if (isKeplerGlMap(content)) {
      return {
        format: _defaultSettings.DATASET_FORMATS.keplergl,
        data: (0, _dataProcessor.processKeplerglJSON)(content)
      };
    } else if (isRowObject(content)) {
      return {
        format: _defaultSettings.DATASET_FORMATS.row,
        data: (0, _dataProcessor.processRowObject)(content)
      };
    } else if (isGeoJson(content)) {
      return {
        format: _defaultSettings.DATASET_FORMATS.geojson,
        data: (0, _dataProcessor.processGeojson)(content)
      };
    } // unsupported json format


    _console["default"].warn("unsupported Json format ".concat(file.name));

    return null;
  });
}

function readJSONFile(fileBlob) {
  return new Promise(function (resolve, reject) {
    var fileReader = new _window.FileReader();

    fileReader.onload = function (_ref5) {
      var result = _ref5.target.result;

      try {
        var json = JSON.parse(result);
        resolve(json);
      } catch (err) {
        reject(null);
      }
    };

    fileReader.readAsText(fileBlob, 'UTF-8');
  });
}

function isGeoJson(json) {
  // json can be feature collection
  // or simgle feature
  return (0, _utils.isPlainObject)(json) && (isFeature(json) || isFeatureCollection(json));
}

function isFeature(json) {
  return json.type === 'Feature' && json.geometry;
}

function isFeatureCollection(json) {
  return json.type === 'FeatureCollection' && json.features;
}

function isRowObject(json) {
  return Array.isArray(json) && (0, _utils.isPlainObject)(json[0]);
}

function isKeplerGlMap(json) {
  return (0, _utils.isPlainObject)(json) && json.datasets && json.config && json.info && json.info.app === 'kepler.gl';
}

function determineJsonProcess(_ref6, defaultProcessor) {
  var dataset = _ref6.dataset,
      format = _ref6.format;

  if (isKeplerGlMap(dataset)) {
    return _dataProcessor.processKeplerglJSON;
  }

  return defaultProcessor;
}

function filesToDataPayload(fileCache) {
  // seperate out files which could be a single datasets. or a keplergl map json
  var collection = fileCache.reduce(function (accu, file) {
    var data = file.data,
        _file$info = file.info,
        info = _file$info === void 0 ? {} : _file$info;
    var format = info.format;

    if (format === _defaultSettings.DATASET_FORMATS.keplergl) {
      // if file contains a single kepler map dataset & config
      accu.keplerMaps.push(_objectSpread({}, data, {
        options: {
          centerMap: !(data.config && data.config.mapState)
        }
      }));
    } else if (_defaultSettings.DATASET_FORMATS[format]) {
      // if file contains only data
      var newDataset = {
        data: data,
        info: _objectSpread({
          id: info.id || (0, _utils.generateHashId)(4)
        }, info)
      };
      accu.datasets.push(newDataset);
    }

    return accu;
  }, {
    datasets: [],
    keplerMaps: []
  }); // add kepler map first with config
  // add datasets later in one add data call

  return collection.keplerMaps.concat({
    datasets: collection.datasets
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,